_zimfw_run_list() {
  local -r zname=${1}
  local -r zdir=${_zdirs[${zname}]}
  print -nR "${_zbold}${zname}:${_znormal} ${zdir}"
  if [[ ! -e ${zdir} ]] print -n ' (not installed)'
  if [[ -z ${_zurls[${zname}]} ]] print -n ' (external)'
  if (( ${_zfrozens[${zname}]} )) print -n ' (frozen)'
  if (( ${_zdisabled_root_dirs[(I)${zdir}]} )) print -n ' (disabled)'
  print
  if (( _zprintlevel > 1 )); then
    if [[ ${_zfrozens[${zname}]} -eq 0 && -n ${_zurls[${zname}]} ]]; then
      if [[ ${_ztools[${zname}]} == mkdir ]]; then
        print '  From: mkdir'
      else
        print -nR "  From: ${_zurls[${zname}]}, "
        if [[ -z ${_zrevs[${zname}]} ]]; then
          print -n 'default branch'
        else
          print -nR "${_ztypes[${zname}]} ${_zrevs[${zname}]}"
        fi
        print -nR ", using ${_ztools[${zname}]}"
        if (( ! _zsubmodules[${zname}] )) print -n ', no git submodules'
        print
      fi
      if [[ -n ${_zonpulls[${zname}]} ]] print -R "  On-pull: ${_zonpulls[${zname}]}"
    fi
    # Match the current module dir prefix from _zroot_dirs
    local -r zroot_dirs=(${(M)_zroot_dirs:#${zdir}/*})
    if (( ${#zroot_dirs} )); then
      print '  Additional root:'
      local zroot_dir
      for zroot_dir in ${zroot_dirs}; do
        print -nR "    ${zroot_dir}"
        if (( ${_zdisabled_root_dirs[(I)${zroot_dir}]} )) print -n ' (disabled)'
        print
      done
    fi
    # Match and remove the prefix from _zfpaths, _zfunctions and _zcmds
    local -r zpre="${(q)zdir}(|/*)"$'\0'
    local -r zfpaths=(${${(M)_zfpaths:#${~zpre}*}#${~zpre}}) zfunctions=(${${(M)_zfunctions:#${~zpre}*}#${~zpre}}) zcmds=(${${(M)_zcmds:#${~zpre}*}#${~zpre}})
    if (( ${#zfpaths} )) print -R '  fpath: '${zfpaths}
    if (( ${#zfunctions} )) print -R '  autoload: '${zfunctions}
    if (( ${#zcmds} )) print -R '  cmd: '${(j:; :)zcmds}
  fi
}
